// This file is part of the "Synergy Quest" game
// (github.com/tdelta/SynergyQuest).
// 
// Copyright (c) 2020
//   Marc Arnold     (m_o_arnold@gmx.de)
//   Martin Kerscher (martin_x@live.de)
//   Jonas Belouadi  (jonas.belouadi@posteo.net)
//   Anton W Haubner (anton.haubner@outlook.de)
// 
// This program is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 3 of the License, or (at your option) any
// later version.
// 
// This program is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
// more details.
// 
// You should have received a copy of the GNU General Public License along with
// this program; if not, see <https://www.gnu.org/licenses>.
// 
// Additional permission under GNU GPL version 3 section 7 apply,
// see `LICENSE.md` at the root of this source code repository.

using System.Collections.Generic;
using UnityEngine;
using YamlDotNet.Serialization;
using YamlDotNet.Serialization.NamingConventions;

/**
 * <summary>
 * Controls the behavior of the "Credits" menu screen.
 * 
 * Also reads information about external assets (authors, licenses, ...) from the "Resources/ExternalArtCredits.yaml"
 * resource and displays each entry using <see cref="CreditsBlock"/>.
 * </summary>
 */
public class Credits : MonoBehaviour
{
    [SerializeField] private GameObject autoGeneratedCreditsContainer = default;
    [SerializeField] private CreditsBlock creditsBlockPrefab = default;

    private void Awake()
    {
        // Read asset credits information from YAML resource
        var externalArtCreditsRaw = ResourcePathSettings.Instance.ExternalArtCredits.text;
        var deserializer = new DeserializerBuilder()
            .WithNamingConvention(CamelCaseNamingConvention.Instance)
            .Build();

        var externalArtCredits = deserializer.Deserialize<
            Dictionary<string, CreditsEntry>
        >(externalArtCreditsRaw);

        // Display each entry
        foreach (var keyValue in externalArtCredits)
        {
            var block = Instantiate(creditsBlockPrefab, autoGeneratedCreditsContainer.transform);
            block.Init(keyValue.Key, keyValue.Value);
        }
    }
    
    public void OnViewExternalLibsPressed()
    {
        SceneController.Instance.LoadExternalLibCredits();
    }

    public void OnViewLicensePressed()
    {
        SceneController.Instance.LoadLicenseMenu();
    }

    public void OnBackPressed()
    {
        SceneController.Instance.LoadMainMenu();
    }
}

