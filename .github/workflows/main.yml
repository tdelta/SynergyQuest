name: Synergy Quest CI

on:
  pull_request: {}
  push: { branches: [develop] }
  workflow_dispatch: {}

env:
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}

jobs:
  build:
    name: Build SynergyQuest
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version:
          - 14.14.0
        projectPath:
          - SynergyQuest
        unityVersion:
          - 2019.4.2f1
        linuxOutputPath:
          - SynergyQuest/Build/Linux.x86_64/SynergyQuest
        linuxBuildTarFile:
          - SynergyQuestLinux.X86_64.tar
        windowsOutputPath:
          - SynergyQuest/Build/Windows/SynergyQuest
    steps:
      - name: Install Yarn
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - run: npm install -g yarn

      - name: Add yarn to PATH
        run: |
            YARN_PATH=$(npm root -g)/yarn/bin
            echo "Path to yarn: $YARN_PATH"
            echo "$YARN_PATH" >> $GITHUB_PATH

      - name: Confirm yarn version
        run: yarn --version

      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          ref: 'develop'
          lfs: true

      - name: Cache Unity libraries
        uses: pat-s/always-upload-cache@v1.1.0
        with:
          path: SynergyQuest/Library
          key: Library-SynergyQuest-StandaloneLinux64
          restore-keys: |
            Library-SynergyQuest-
            Library-

      # Cache dependencies etc. downloaded by yarn
      # (based on https://dev.to/mpocock1/how-to-cache-nodemodules-in-github-actions-with-yarn-24eh)
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      # Cache yarn cache dir
      - name: Cache yarn cache dir
        uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Cache node_modules folders
        uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      # Build Web Apps
      - name: Build Build Scripts
        working-directory: Controller/build-scripts
        run: |
          yarn install
          yarn build

      - name: Build Controller Client Lib
        working-directory: Controller/controller-client-lib
        run: |
          yarn install
          yarn prepare-distribution

      - name: Build Sensor Input Lib
        working-directory: Controller/sensor-input-lib
        run: |
          yarn install
          yarn prepare-distribution

      - name: Build Main Controller App
        working-directory: Controller/controller-app
        run: |
          yarn install
          yarn prepare-distribution

      - name: Build SSL Warning Info App
        working-directory: Controller/ssl-warning-info
        run: |
          yarn install
          yarn prepare-distribution

      # Linux build
      - name: Build Unity project for Linux
        uses: webbertakken/unity-builder@v0.10
        with:
          projectPath: ${{ matrix.projectPath }}
          unityVersion: ${{ matrix.unityVersion }}
          targetPlatform: StandaloneLinux64
          buildMethod: 'ProjectBuilder.BuildForLinuxBuildNoWeb'

      - name: Build Tar Archive of Linux Build to preserve permissions
        run: tar -cvf ${{ matrix.linuxBuildTarFile }} ${{ matrix.linuxOutputPath }}

      - name: Uploading linux build artifact
        uses: actions/upload-artifact@v2
        with:
          name: Linux x86_64 Artifact
          path: ${{ matrix.linuxBuildTarFile }}

      # Windows build
      - name: Build Unity project for Windows
        uses: webbertakken/unity-builder@v0.10
        with:
          projectPath: ${{ matrix.projectPath }}
          unityVersion: ${{ matrix.unityVersion }}
          targetPlatform: StandaloneWindows
          buildMethod: 'ProjectBuilder.BuildForWindowsBuildNoWeb'

      - name: Uploading windows build artifact
        uses: actions/upload-artifact@v2
        with:
          name: Windows Artifact
          path: ${{ matrix.windowsOutputPath }}
